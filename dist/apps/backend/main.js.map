{"version":3,"file":"main.js","mappings":"qIAAA,SAEA,SAGO,IAAMA,EAAN,MACLC,YAA6BC,GAAA,KAAAA,WAAAA,CAAyB,CAGtDC,UACE,OAAOC,KAAKF,WAAWC,SACzB,GAHA,eAAC,IAAAE,O,gJAHUL,EAAa,eADzB,IAAAM,c,kCAEoD,mB,OAAA,IAAV,EAAAC,YAAA,EAAAA,YAAU,YADxCP,GAAA,EAAAA,cAAAA,C,mGCLb,QACA,SACA,SACA,QAEA,SACA,SACA,SACA,QACA,SACA,SACA,SAEMQ,EAAOC,QAAQC,IAAU,KACzBC,EAAyB,YAATH,GAA+B,eAATA,EAE5CI,QAAQC,IAAIC,UAAWL,QAAQM,OAyBxB,IAAMC,EAAN,QAAMA,EAAS,eAvBrB,IAAAC,QAAO,CACNC,QAAS,CACP,EAAAC,cAAcC,QAA4B,CACxCC,OAAQ,EAAAC,aACRC,MAAOZ,EACPa,WAAYb,EACZc,YAAY,EACZC,iBAAiB,EACjBC,eAAgBhB,GACZ,IAAAiB,MAAKnB,QAAQM,MAAO,gCACpB,IAAAa,MAAKd,UAAW,iBAGxBe,YAAa,CAAC,EAAA7B,eACd8B,UAAW,CACT,EAAAvB,WACA,EAAAwB,cACA,EAAAC,iBACA,EAAAC,gBACA,EAAAC,aACA,EAAAC,iBAGSnB,GAAA,EAAAA,UAAAA,C,oGCzCb,SAGO,IAAMT,EAAN,MACLJ,UACE,MAAO,CAAEiC,QAAS,sBACpB,GAHW7B,EAAU,eADtB,IAAA8B,eACY9B,GAAA,EAAAA,WAAAA,C,uGCHb,SACA,SAGO,IAAMwB,EAAN,cAA4B,EAAAO,aAC3BC,e,yDACEnC,KAAKoC,UACb,G,CAEMC,oBAAoBC,G,mDACxBtC,KAAKuC,IAAI,cAAc,IAAY,EAAD,gDAC1BD,EAAIE,OACZ,KACF,G,GATWb,EAAa,eADzB,IAAAM,eACYN,GAAA,EAAAA,cAAAA,C,4GCJb,SACA,SAGO,IAAMc,EAAN,QACL,eAAC,IAAAC,QAAM,IAAM,EAAAC,KAAK,CAAEC,UAAU,I,6DAG9B,eAAC,IAAAF,QAAM,IAAMG,QAAQ,CAAED,UAAU,I,+DAGjC,eAAC,IAAAF,QAAM,IAAMI,QAAQ,CAAEF,UAAU,I,iEAGjC,eAAC,IAAAF,QAAM,IAAM,EAAAK,MAAM,CAAEH,UAAU,I,2BACrB,mB,OAAA,IAAJ,EAAAG,MAAA,EAAAA,MAAI,W,2BAEV,eAAC,IAAAL,QAAM,IAAMM,MAAM,CAAEJ,UAAU,I,2BAChB,mB,EAAA,oBAAJI,MAAAA,MAAI,W,gCAEf,eAAC,IAAAN,QAAM,IAAMM,MAAM,CAAEJ,UAAU,I,2BAChB,mB,EAAA,oBAAJI,MAAAA,MAAI,W,gCAjBJP,EAAQ,eADpB,IAAAQ,eACYR,GAAA,EAAAA,SAAAA,C,iFCJb,eAEA,IAAYS,GAAZ,SAAYA,GACV,cACA,kBACA,uBACD,CAJD,CAAYA,EAAA,EAAAA,SAAA,EAAAA,OAAM,MAMlB,IAAAC,kBAAiBD,EAAQ,CACvBE,KAAM,SACNC,YAAa,e,yGCVf,SACA,SAGA,IAAMC,EAAN,QACE,eAAC,IAAAZ,QAAM,IAAMI,QAAQ,CAAEF,UAAU,I,+DAGjC,eAAC,IAAAF,QAAM,IAAMI,QAAQ,CAAEF,UAAU,I,iEAGjC,eAAC,IAAAF,QAAM,IAAMI,QAAQ,CAAEF,UAAU,I,oEAP7BU,EAAS,eADd,IAAAL,eACKK,GAYC,IAAMC,EAAN,QACL,eAAC,IAAAb,QAAM,IAAM,EAAAC,KAAK,CAAEC,UAAU,I,6DAG9B,eAAC,IAAAF,QAAM,IAAMG,QAAQ,CAAED,UAAU,I,+DAGjC,eAAC,IAAAF,QAAM,IAAMG,QAAQ,CAAED,UAAU,I,sEAGjC,eAAC,IAAAF,QAAM,IAAMM,MAAM,CAAEJ,UAAU,I,2BAChB,mB,EAAA,oBAAJI,MAAAA,MAAI,W,gCAEf,eAAC,IAAAN,QAAM,IAAMM,MAAM,CAAEJ,UAAU,I,2BAChB,mB,EAAA,oBAAJI,MAAAA,MAAI,W,gCAEf,eAAC,IAAAN,QAAM,IAAM,CAAC,EAAAK,OAAO,CAAEH,UAAU,I,8DAGjC,eAAC,IAAAF,QAAM,IAAMY,GAAW,CAAEV,UAAU,I,2BAC5BU,I,6BApBGC,EAAO,eADnB,IAAAN,eACYM,GAAA,EAAAA,QAAAA,C,8GChBb,SACA,SACA,SACA,SACA,QAGO,IAAMR,EAAI,EAAV,QACL,eAAC,IAAAL,QAAM,IAAM,EAAAC,KAAK,CAAEC,UAAU,I,6DAG9B,eAAC,IAAAF,QAAM,IAAMG,QAAQ,CAAED,UAAU,I,+DAGjC,eAAC,IAAAF,QAAM,IAAM,CAAC,EAAAD,WAAW,CAAEG,UAAU,I,oEAGrC,eAAC,IAAAF,QAAM,IAAMI,S,mEAGb,eAAC,IAAAJ,QAAM,IAAMM,MAAM,CAAEJ,UAAU,I,2BAChB,mB,EAAA,oBAAJI,MAAAA,MAAI,W,gCAEf,eAAC,IAAAN,QAAM,IAAMM,MAAM,CAAEJ,UAAU,I,2BAChB,mB,EAAA,oBAAJI,MAAAA,MAAI,W,gCAEf,eAAC,IAAAN,QAAM,IAAMI,QAAQ,CAAEF,UAAU,I,iEAGjC,eAAC,IAAAF,QAAM,IAAM,EAAAc,MAAM,CAAEZ,UAAU,I,2BACrB,mB,OAAA,IAAJ,EAAAY,MAAA,EAAAA,MAAI,W,2BAEV,eAAC,IAAAd,QAAM,IAAM,EAAAQ,QAAQ,CAAEN,UAAU,I,2BACnB,mB,OAAA,IAAN,EAAAM,QAAA,EAAAA,QAAM,W,6BAEd,eAAC,IAAAR,QAAM,IAAMI,QAAQ,CAAEF,UAAU,I,oEAGjC,eAAC,IAAAF,QAAM,IAAM,GAAM,CAAEE,UAAU,I,2BACf,mB,OAAA,IAAP,EAAAW,SAAA,EAAAA,SAAO,W,8BAhCLR,EAAI,iBADhB,IAAAE,eACYF,GAAA,EAAAA,KAAAA,C,qGCPb,SACA,SAGO,IAAMS,EAAN,QACL,eAAC,IAAAd,QAAM,IAAM,EAAAC,KAAK,CAAEC,UAAU,I,6DAG9B,eAAC,IAAAF,QAAM,IAAMG,QAAQ,CAAED,UAAU,I,+DAGjC,eAAC,IAAAF,QAAM,IAAM,CAAC,EAAAK,OAAO,CAAEH,UAAU,I,8DAGjC,eAAC,IAAAF,QAAM,IAAMM,MAAM,CAAEJ,UAAU,I,2BAChB,mB,EAAA,oBAAJI,MAAAA,MAAI,W,gCAEf,eAAC,IAAAN,QAAM,IAAMM,MAAM,CAAEJ,UAAU,I,2BAChB,mB,EAAA,oBAAJI,MAAAA,MAAI,W,gCAdJQ,EAAI,eADhB,IAAAP,eACYO,GAAA,EAAAA,KAAAA,C,+GCJb,SACA,SACA,SAGO,IAAM5B,EAAN,MACL/B,YAAoB4D,GAAA,KAAAA,OAAAA,CAAwB,CAGtCC,eACkDC,EACCC,G,mDAEvD,OAAO5D,KAAKyD,OAAOI,SAASC,OAAO,CACjCC,KAAM,CACJH,OACAD,WAGN,G,CAGMK,eAC8CC,EACKL,G,mDAEvD,OAAO5D,KAAKyD,OAAOI,SAASK,OAAO,CACjCC,MAAO,CACLF,MAEFF,KAAM,CACJH,SAGN,G,GAzBM,eADL,IAAAQ,WAAS,IAAM,EAAA3B,WAEb,iBAAA4B,MAAK,SAAU,CAAEC,KAAM,IAAM,EAAA3B,IAAKC,UAAU,KAC5C,iBAAAyB,MAAK,OAAQ,CAAEC,KAAM,IAAMzB,OAAQD,UAAU,K,qKAW1C,eADL,IAAAwB,WAAS,IAAM,EAAA3B,WAEb,iBAAA4B,MAAK,KAAM,CAAEC,KAAM,IAAM,EAAA3B,IAAKC,UAAU,KACxC,iBAAAyB,MAAK,OAAQ,CAAEC,KAAM,IAAMzB,OAAQD,UAAU,K,qKAnBrChB,EAAgB,eAD5B,IAAA2C,WAAS,IAAM,EAAA9B,W,kCAE2B,mB,OAAA,IAAb,EAAAd,eAAA,EAAAA,eAAa,YAD9BC,GAAA,EAAAA,iBAAAA,C,+GCLb,SACA,SACA,SAGO,IAAMC,EAAN,MACLhC,YAAoB4D,GAAA,KAAAA,OAAAA,CAAwB,CAMtCe,c,mDACJ,OAAOxE,KAAKyD,OAAOgB,QAAQC,SAAS,CAClCC,QAAS,CACPC,UAAW,QAEbC,OAAQ,CACNZ,IAAI,EACJb,MAAM,EACNC,aAAa,EACbuB,WAAW,EACXE,WAAW,EACXC,KAAM,CACJF,OAAQ,CACNZ,IAAI,EACJb,MAAM,EACN4B,UAAU,EACVC,KAAM,CACJJ,OAAQ,CACNZ,IAAI,EACJb,MAAM,EACNwB,WAAW,EACXE,WAAW,IAGfI,WAAY,CACVL,OAAQ,CACNZ,IAAI,EACJL,MAAM,EACNgB,WAAW,EACXE,WAAW,IAGfK,QAAQ,EACRP,WAAW,EACXE,WAAW,MAKrB,G,CAMMM,cACmDhC,EAEvDC,G,mDAEA,OAAOrD,KAAKyD,OAAOgB,QAAQX,OAAO,CAChCC,KAAM,CACJX,OACAC,eAEFwB,OAAQ,CACNZ,IAAI,EACJb,MAAM,EACNC,aAAa,EACbuB,WAAW,EACXE,WAAW,IAGjB,G,CAMMO,kBAC8CpB,EACKb,G,mDAEvD,OAAOpD,KAAKyD,OAAOgB,QAAQP,OAAO,CAChCC,MAAO,CACLF,MAEFF,KAAM,CACJX,SAGN,G,CAMMkC,yBAC8CrB,EAElDZ,G,mDAEA,OAAOrD,KAAKyD,OAAOgB,QAAQP,OAAO,CAChCC,MAAO,CACLF,MAEFF,KAAM,CACJV,gBAGN,G,GApGM,eADL,IAAAkC,QAAM,IAAM,CAAC,EAAAhC,W,qJA8CR,eADL,IAAAa,WAAS,IAAM,EAAAb,UAEb,iBAAAc,MAAK,OAAQ,CAAEC,KAAM,IAAMzB,OAAQD,UAAU,KAC7C,iBAAAyB,MAAK,cAAe,CAAEC,KAAM,IAAMzB,OAAQ2C,aAAc,M,oKAsBrD,eADL,IAAApB,WAAS,IAAM,EAAAb,UAEb,iBAAAc,MAAK,KAAM,CAAEC,KAAM,IAAM,EAAA3B,IAAKC,UAAU,KACxC,iBAAAyB,MAAK,OAAQ,CAAEC,KAAM,IAAMzB,OAAQD,UAAU,K,wKAgB1C,eADL,IAAAwB,WAAS,IAAM,EAAAb,UAEb,iBAAAc,MAAK,KAAM,CAAEC,KAAM,IAAM,EAAA3B,IAAKC,UAAU,KACxC,iBAAAyB,MAAK,cAAe,CAAEC,KAAM,IAAMzB,OAAQD,UAAU,K,+KAhG5Cf,EAAe,eAD3B,IAAA0C,WAAS,IAAM,EAAAhB,U,kCAE2B,mB,OAAA,IAAb,EAAA5B,eAAA,EAAAA,eAAa,YAD9BE,GAAA,EAAAA,gBAAAA,C,8GCLb,SACA,SACA,SAEA,SAGO,IAAMC,EAAN,MACLjC,YAAoB4D,GAAA,KAAAA,OAAAA,CAAwB,CAMtCgC,W,mDACJ,OAAOzF,KAAKyD,OAAOsB,KAAKL,SAAS,CAC/BC,QAAS,CACPC,UAAW,SAGjB,G,CAMMc,WACmDtC,EAEvDuC,G,mDAEA,OAAO3F,KAAKyD,OAAOsB,KAAKjB,OAAO,CAC7BC,KAAM,CACJX,OACAuC,YACAX,SAAU,EACVG,OAAQ,OACRS,OAAQ,IAGd,G,CAMMC,eAC8C5B,EACKb,G,mDAEvD,OAAOpD,KAAKyD,OAAOsB,KAAKb,OAAO,CAC7BC,MAAO,CACLF,MAEFF,KAAM,CACJX,SAGN,G,CAGM0C,iBAC8C7B,EACQe,EAE1DG,G,mDAEA,OAAOnF,KAAKyD,OAAOsB,KAAKb,OAAO,CAC7BC,MAAO,CACLF,MAEFF,KAAM,CACJoB,SACAH,aAGN,G,GA9DM,eADL,IAAAO,QAAM,IAAM,CAAC,EAAAxC,Q,kJAaR,eADL,IAAAqB,WAAS,IAAM,EAAArB,OAEb,iBAAAsB,MAAK,OAAQ,CAAEC,KAAM,IAAMzB,OAAQD,UAAU,KAC7C,iBAAAyB,MAAK,YAAa,CAAEC,KAAM,IAAM,EAAA3B,IAAKC,UAAU,K,iKAkB5C,eADL,IAAAwB,WAAS,IAAM,EAAArB,OAEb,iBAAAsB,MAAK,KAAM,CAAEC,KAAM,IAAM,EAAA3B,IAAKC,UAAU,KACxC,iBAAAyB,MAAK,OAAQ,CAAEC,KAAM,IAAMzB,OAAQD,UAAU,K,qKAa1C,eADL,IAAAwB,WAAS,IAAM,EAAArB,OAEb,iBAAAsB,MAAK,KAAM,CAAEC,KAAM,IAAM,EAAA3B,IAAKC,UAAU,KACxC,iBAAAyB,MAAK,WAAY,CAAEC,KAAM,IAAM,EAAAyB,MAAOnD,UAAU,KAChD,iBAAAyB,MAAK,SAAU,CAAEC,KAAM,IAAM,EAAApB,OAAQN,UAAU,K,qFAClC,mB,OAAA,IAAN,EAAAM,QAAA,EAAAA,QAAM,W,gFA1DLpB,EAAY,eADxB,IAAAyC,WAAS,IAAM,EAAAxB,O,kCAE2B,mB,OAAA,IAAb,EAAApB,eAAA,EAAAA,eAAa,YAD9BG,GAAA,EAAAA,aAAAA,C,4GCPb,SACA,SACA,QAGO,IAAMC,EAAN,MACLlC,YAAoB4D,GAAA,KAAAA,OAAAA,CAAwB,CAGtCuC,WACmD5C,G,mDAEvD,OAAOpD,KAAKyD,OAAOwB,KAAKnB,OAAO,CAC7BC,KAAM,CACJX,SAGN,G,GARM,eADL,IAAAgB,WAAS,IAAM,EAAAZ,OAEb,iBAAAa,MAAK,OAAQ,CAAEC,KAAM,IAAMzB,OAAQD,UAAU,K,0JALrCb,EAAY,eADxB,IAAAwC,WAAS,IAAM,EAAAf,O,kCAE2B,mB,OAAA,IAAb,EAAA7B,eAAA,EAAAA,eAAa,YAD9BI,GAAA,EAAAA,aAAAA,C,SCLbkE,EAAOC,QAAUC,QAAQ,iB,UCAzBF,EAAOC,QAAUC,QAAQ,iB,UCAzBF,EAAOC,QAAUC,QAAQ,e,UCAzBF,EAAOC,QAAUC,QAAQ,kB,UCAzBF,EAAOC,QAAUC,QAAQ,iB,UCAzBF,EAAOC,QAAUC,QAAQ,Q,SCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uFCjBA,SACA,SAEA,UAEA,W,4CACE,MAAM5D,QAAY,EAAAoE,YAAY5C,OAAO,EAAAlD,WAErC0B,EAAIqE,gBADiB,OAErB,MAAMC,EAAOvG,QAAQC,IAAIuG,MAAQ,WAC3BvE,EAAIwE,OAAOF,GACjB,EAAAG,OAAOtG,IACL,kDAAkDmG,QAEtD,G,CAEAI,E","sources":["webpack://todo-app/./apps/backend/src/app/app.controller.ts","webpack://todo-app/./apps/backend/src/app/app.module.ts","webpack://todo-app/./apps/backend/src/app/app.service.ts","webpack://todo-app/./apps/backend/src/app/helper/prisma.service.ts","webpack://todo-app/./apps/backend/src/app/models/activity.model.ts","webpack://todo-app/./apps/backend/src/app/models/enums/status.enum.ts","webpack://todo-app/./apps/backend/src/app/models/project.model.ts","webpack://todo-app/./apps/backend/src/app/models/todo.model.ts","webpack://todo-app/./apps/backend/src/app/models/user.model.ts","webpack://todo-app/./apps/backend/src/app/resolvers/activity.resolver.ts","webpack://todo-app/./apps/backend/src/app/resolvers/project.resolver.ts","webpack://todo-app/./apps/backend/src/app/resolvers/todo.resolver.ts","webpack://todo-app/./apps/backend/src/app/resolvers/user.resolver.ts","webpack://todo-app/external commonjs \"@nestjs/apollo\"","webpack://todo-app/external commonjs \"@nestjs/common\"","webpack://todo-app/external commonjs \"@nestjs/core\"","webpack://todo-app/external commonjs \"@nestjs/graphql\"","webpack://todo-app/external commonjs \"@prisma/client\"","webpack://todo-app/external commonjs \"tslib\"","webpack://todo-app/external node-commonjs \"path\"","webpack://todo-app/webpack/bootstrap","webpack://todo-app/./apps/backend/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData() {\n    return this.appService.getData();\n  }\n}\n","import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { join } from 'path';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PrismaService } from './helper/prisma.service';\nimport { ActivityResolver } from './resolvers/activity.resolver';\nimport { ProjectResolver } from './resolvers/project.resolver';\nimport { TodoResolver } from './resolvers/todo.resolver';\nimport { UserResolver } from './resolvers/user.resolver';\n\nconst mode = process.env['MODE'];\nconst isDevelopMode = mode !== 'staging' && mode !== 'production';\n\nconsole.log(__dirname, process.cwd());\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloDriverConfig>({\n      driver: ApolloDriver,\n      debug: isDevelopMode,\n      playground: isDevelopMode,\n      sortSchema: true,\n      useGlobalPrefix: true,\n      autoSchemaFile: isDevelopMode\n        ? join(process.cwd(), 'apps/backend/src/schema.gql')\n        : join(__dirname, 'schema.gql'),\n    }),\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    PrismaService,\n    ActivityResolver,\n    ProjectResolver,\n    TodoResolver,\n    UserResolver,\n  ],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Welcome to backend!' };\n  }\n}\n","import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n","import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Todo } from './todo.model';\n\n@ObjectType()\nexport class Activity {\n  @Field(() => Int, { nullable: false })\n  id: number;\n\n  @Field(() => String, { nullable: false })\n  text: string;\n\n  @Field(() => Number, { nullable: false })\n  todoId: number;\n\n  @Field(() => Todo, { nullable: false })\n  todo: Todo;\n\n  @Field(() => Date, { nullable: false })\n  updatedAt: Date;\n\n  @Field(() => Date, { nullable: false })\n  createdAt: Date;\n}\n","import { registerEnumType } from '@nestjs/graphql';\n\nexport enum Status {\n  OPEN = 'OPEN',\n  CLOSED = 'CLOSED',\n  COMPLETED = 'COMPLETED',\n}\n\nregisterEnumType(Status, {\n  name: 'Status',\n  description: 'Todo Status',\n});\n","import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Todo } from './todo.model';\n\n@ObjectType()\nclass TodoCount {\n  @Field(() => Number, { nullable: false })\n  open: number;\n\n  @Field(() => Number, { nullable: false })\n  closed: number;\n\n  @Field(() => Number, { nullable: false })\n  completed: number;\n}\n\n@ObjectType()\nexport class Project {\n  @Field(() => Int, { nullable: false })\n  id: number;\n\n  @Field(() => String, { nullable: false })\n  name: string;\n\n  @Field(() => String, { nullable: false })\n  description: string;\n\n  @Field(() => Date, { nullable: false })\n  updatedAt: Date;\n\n  @Field(() => Date, { nullable: false })\n  createdAt: Date;\n\n  @Field(() => [Todo], { nullable: false })\n  todo: Todo[];\n\n  @Field(() => TodoCount, { nullable: false })\n  counts: TodoCount;\n}\n","import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Activity } from './activity.model';\nimport { Status } from './enums/status.enum';\nimport { Project } from './project.model';\nimport { User } from './user.model';\n\n@ObjectType()\nexport class Todo {\n  @Field(() => Int, { nullable: false })\n  id: number;\n\n  @Field(() => String, { nullable: false })\n  name: string;\n\n  @Field(() => [Activity], { nullable: false })\n  activities: Activity[];\n\n  @Field(() => Number)\n  progress: number;\n\n  @Field(() => Date, { nullable: false })\n  updatedAt: Date;\n\n  @Field(() => Date, { nullable: false })\n  createdAt: Date;\n\n  @Field(() => Number, { nullable: false })\n  userId: number;\n\n  @Field(() => User, { nullable: false })\n  user: User;\n\n  @Field(() => Status, { nullable: false })\n  status: Status;\n\n  @Field(() => Number, { nullable: false })\n  projectId: number;\n\n  @Field(() => Todo, { nullable: false })\n  project: Project;\n}\n","import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Todo } from './todo.model';\n\n@ObjectType()\nexport class User {\n  @Field(() => Int, { nullable: false })\n  id: number;\n\n  @Field(() => String, { nullable: false })\n  name: string;\n\n  @Field(() => [Todo], { nullable: false })\n  todo: Todo[];\n\n  @Field(() => Date, { nullable: false })\n  updatedAt: Date;\n\n  @Field(() => Date, { nullable: false })\n  createdAt: Date;\n}\n","import { Args, Int, Mutation, Resolver } from '@nestjs/graphql';\nimport { PrismaService } from '../helper/prisma.service';\nimport { Activity } from '../models/activity.model';\n\n@Resolver(() => Activity)\nexport class ActivityResolver {\n  constructor(private prisma: PrismaService) {}\n\n  @Mutation(() => Activity)\n  async createActivity(\n    @Args('todoId', { type: () => Int, nullable: false }) todoId: number,\n    @Args('text', { type: () => String, nullable: false }) text: string\n  ) {\n    return this.prisma.activity.create({\n      data: {\n        text,\n        todoId,\n      },\n    });\n  }\n\n  @Mutation(() => Activity)\n  async updateActivity(\n    @Args('id', { type: () => Int, nullable: false }) id: number,\n    @Args('text', { type: () => String, nullable: false }) text: string\n  ) {\n    return this.prisma.activity.update({\n      where: {\n        id,\n      },\n      data: {\n        text,\n      },\n    });\n  }\n}\n","import { Args, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { PrismaService } from '../helper/prisma.service';\nimport { Project } from '../models/project.model';\n\n@Resolver(() => Project)\nexport class ProjectResolver {\n  constructor(private prisma: PrismaService) {}\n\n  /**\n   * すべてのプロジェクト情報を返す\n   */\n  @Query(() => [Project])\n  async allProjects() {\n    return this.prisma.project.findMany({\n      orderBy: {\n        updatedAt: 'desc',\n      },\n      select: {\n        id: true,\n        name: true,\n        description: true,\n        updatedAt: true,\n        createdAt: true,\n        todo: {\n          select: {\n            id: true,\n            name: true,\n            progress: true,\n            user: {\n              select: {\n                id: true,\n                name: true,\n                updatedAt: true,\n                createdAt: true,\n              },\n            },\n            activities: {\n              select: {\n                id: true,\n                text: true,\n                updatedAt: true,\n                createdAt: true,\n              },\n            },\n            status: true,\n            updatedAt: true,\n            createdAt: true,\n          },\n        },\n      },\n    });\n  }\n\n  /**\n   * 新規でプロジェクトを作成し、作成したプロジェクト情報を返す\n   */\n  @Mutation(() => Project)\n  async createProject(\n    @Args('name', { type: () => String, nullable: false }) name: string,\n    @Args('description', { type: () => String, defaultValue: '' })\n    description: string\n  ) {\n    return this.prisma.project.create({\n      data: {\n        name,\n        description,\n      },\n      select: {\n        id: true,\n        name: true,\n        description: true,\n        updatedAt: true,\n        createdAt: true,\n      },\n    });\n  }\n\n  /**\n   * プロジェクト名の更新\n   */\n  @Mutation(() => Project)\n  async updateProjectName(\n    @Args('id', { type: () => Int, nullable: false }) id: number,\n    @Args('name', { type: () => String, nullable: false }) name: string\n  ) {\n    return this.prisma.project.update({\n      where: {\n        id,\n      },\n      data: {\n        name,\n      },\n    });\n  }\n\n  /**\n   * プロジェクトの概要を更新\n   */\n  @Mutation(() => Project)\n  async updateProjectDescription(\n    @Args('id', { type: () => Int, nullable: false }) id: number,\n    @Args('description', { type: () => String, nullable: false })\n    description: string\n  ) {\n    return this.prisma.project.update({\n      where: {\n        id,\n      },\n      data: {\n        description,\n      },\n    });\n  }\n}\n","import { Args, Float, Int, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { PrismaService } from '../helper/prisma.service';\nimport { Status } from '../models/enums/status.enum';\nimport { Project } from '../models/project.model';\nimport { Todo } from '../models/todo.model';\n\n@Resolver(() => Todo)\nexport class TodoResolver {\n  constructor(private prisma: PrismaService) {}\n\n  /**\n   * すべてのTodo情報を返す\n   */\n  @Query(() => [Todo])\n  async allTodos() {\n    return this.prisma.todo.findMany({\n      orderBy: {\n        updatedAt: 'desc',\n      },\n    });\n  }\n\n  /**\n   * 新規でTodoを作成し、作成した情報を返す\n   */\n  @Mutation(() => Todo)\n  async createTodo(\n    @Args('name', { type: () => String, nullable: false }) name: string,\n    @Args('projectId', { type: () => Int, nullable: false })\n    projectId: number\n  ) {\n    return this.prisma.todo.create({\n      data: {\n        name,\n        projectId,\n        progress: 0,\n        status: 'OPEN',\n        userId: 1,\n      },\n    });\n  }\n\n  /**\n   * Todo名の更新\n   */\n  @Mutation(() => Todo)\n  async updateTodoName(\n    @Args('id', { type: () => Int, nullable: false }) id: number,\n    @Args('name', { type: () => String, nullable: false }) name: string\n  ) {\n    return this.prisma.todo.update({\n      where: {\n        id,\n      },\n      data: {\n        name,\n      },\n    });\n  }\n\n  @Mutation(() => Todo)\n  async updateTodoDetail(\n    @Args('id', { type: () => Int, nullable: false }) id: number,\n    @Args('progress', { type: () => Float, nullable: false }) progress: number,\n    @Args('status', { type: () => Status, nullable: false })\n    status: Status\n  ) {\n    return this.prisma.todo.update({\n      where: {\n        id,\n      },\n      data: {\n        status,\n        progress,\n      },\n    });\n  }\n}\n","import { Args, Mutation, Resolver } from '@nestjs/graphql';\nimport { PrismaService } from '../helper/prisma.service';\nimport { User } from '../models/user.model';\n\n@Resolver(() => User)\nexport class UserResolver {\n  constructor(private prisma: PrismaService) {}\n\n  @Mutation(() => User)\n  async createUser(\n    @Args('name', { type: () => String, nullable: false }) name: string\n  ) {\n    return this.prisma.user.create({\n      data: {\n        name,\n      },\n    });\n  }\n}\n","module.exports = require(\"@nestjs/apollo\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/graphql\");","module.exports = require(\"@prisma/client\");","module.exports = require(\"tslib\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":["AppController","constructor","appService","getData","this","Get","Controller","AppService","mode","process","env","isDevelopMode","console","log","__dirname","cwd","AppModule","Module","imports","GraphQLModule","forRoot","driver","ApolloDriver","debug","playground","sortSchema","useGlobalPrefix","autoSchemaFile","join","controllers","providers","PrismaService","ActivityResolver","ProjectResolver","TodoResolver","UserResolver","message","Injectable","PrismaClient","onModuleInit","$connect","enableShutdownHooks","app","$on","close","Activity","Field","Int","nullable","String","Number","Todo","Date","ObjectType","Status","registerEnumType","name","description","TodoCount","Project","User","prisma","createActivity","todoId","text","activity","create","data","updateActivity","id","update","where","Mutation","Args","type","Resolver","allProjects","project","findMany","orderBy","updatedAt","select","createdAt","todo","progress","user","activities","status","createProject","updateProjectName","updateProjectDescription","Query","defaultValue","allTodos","createTodo","projectId","userId","updateTodoName","updateTodoDetail","Float","createUser","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","NestFactory","setGlobalPrefix","port","PORT","listen","Logger","bootstrap"],"sourceRoot":""}